/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { type GLTF } from 'three-stdlib'
import model from '/models/room/typewriter.glb?url'

type GLTFResult = GLTF & {
  nodes: {
    Node1: THREE.Mesh
    Node2: THREE.Mesh
    Node3: THREE.Mesh
    Node4: THREE.Mesh
    Node5: THREE.Mesh
    Node6: THREE.Mesh
    Node7: THREE.Mesh
    Node8: THREE.Mesh
  }
  materials: {
    ['Loader.001']: THREE.MeshLambertMaterial
    Loader: THREE.MeshLambertMaterial
    Key: THREE.MeshLambertMaterial
    Cap: THREE.MeshLambertMaterial
    Frame: THREE.MeshLambertMaterial
    ['Frame.001']: THREE.MeshLambertMaterial
    Poles: THREE.MeshLambertMaterial
  }
}

export function TypeWriter(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(model) as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Node1.geometry}
        material={materials['Loader.001']}
        rotation={[1.572, 0, 0]}
        scale={0.03}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Node2.geometry}
          material={materials.Loader}
        />
        <mesh castShadow receiveShadow geometry={nodes.Node3.geometry} material={materials.Key} />
        <mesh castShadow receiveShadow geometry={nodes.Node4.geometry} material={materials.Key} />
        <mesh castShadow receiveShadow geometry={nodes.Node5.geometry} material={materials.Cap} />
        <mesh castShadow receiveShadow geometry={nodes.Node6.geometry} material={materials.Frame} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Node7.geometry}
          material={materials['Frame.001']}
        />
        <mesh castShadow receiveShadow geometry={nodes.Node8.geometry} material={materials.Poles} />
      </mesh>
    </group>
  )
}

useGLTF.preload(model)
