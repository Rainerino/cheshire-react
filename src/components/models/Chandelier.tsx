/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { type GLTF } from 'three-stdlib'
import model from '/models/tv_room/light.glb?url'

type GLTFResult = GLTF & {
  nodes: {
    BezierCircle001_Mesh002: THREE.Mesh
    BezierCircle002_Mesh003: THREE.Mesh
    BezierCircle003_Mesh004: THREE.Mesh
    BezierCircle_Mesh001: THREE.Mesh
    Cylinder001_Mesh005: THREE.Mesh
    Cylinder002_Mesh006: THREE.Mesh
    Cylinder003_Mesh007: THREE.Mesh
    Cylinder_Cylinder001: THREE.Mesh
    Icosphere_1: THREE.Mesh
    Icosphere_2: THREE.Mesh
    Icosphere_3: THREE.Mesh
    Icosphere_4: THREE.Mesh
    Icosphere001_1: THREE.Mesh
    Icosphere001_2: THREE.Mesh
    Icosphere001_3: THREE.Mesh
    Icosphere002_1: THREE.Mesh
    Icosphere002_2: THREE.Mesh
    Icosphere002_3: THREE.Mesh
    NurbsPath001_Mesh009: THREE.Mesh
    NurbsPath002_Mesh010: THREE.Mesh
    NurbsPath_Mesh008: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshLambertMaterial
    ['Material.003']: THREE.MeshLambertMaterial
    ['Material.002']: THREE.MeshLambertMaterial
    ['Material.004']: THREE.MeshLambertMaterial
  }
}

export function Chandelier(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF(model) as GLTFResult
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BezierCircle001_Mesh002.geometry}
        material={materials['Material.001']}
        position={[-2.832, -3.716, 0]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BezierCircle002_Mesh003.geometry}
        material={materials['Material.001']}
        position={[-2.832, -3.716, 0]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BezierCircle003_Mesh004.geometry}
        material={materials['Material.001']}
        position={[-2.832, -3.716, 0]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.BezierCircle_Mesh001.geometry}
        material={materials['Material.001']}
        position={[-2.832, -3.716, 0]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder001_Mesh005.geometry}
        material={materials['Material.001']}
        position={[-2.832, -3.716, 0]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder002_Mesh006.geometry}
        material={materials['Material.001']}
        position={[-2.832, -3.716, 0]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder003_Mesh007.geometry}
        material={materials['Material.001']}
        position={[-2.832, -3.716, 0]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder_Cylinder001.geometry}
        material={materials['Material.001']}
        position={[-2.832, -3.716, 0]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <group position={[-2.832, -3.716, 0]} rotation={[Math.PI / 2, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere_1.geometry}
          material={materials['Material.003']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere_2.geometry}
          material={materials['Material.001']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere_3.geometry}
          material={materials['Material.002']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere_4.geometry}
          material={materials['Material.004']}
        />
      </group>
      <group position={[-2.832, -3.716, 0]} rotation={[Math.PI / 2, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere001_1.geometry}
          material={materials['Material.003']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere001_2.geometry}
          material={materials['Material.001']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere001_3.geometry}
          material={materials['Material.004']}
        />
      </group>
      <group position={[-2.832, -3.716, 0]} rotation={[Math.PI / 2, 0, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere002_1.geometry}
          material={materials['Material.003']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere002_2.geometry}
          material={materials['Material.001']}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Icosphere002_3.geometry}
          material={materials['Material.004']}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.NurbsPath001_Mesh009.geometry}
        material={materials['Material.003']}
        position={[-2.832, -3.716, 0]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.NurbsPath002_Mesh010.geometry}
        material={materials['Material.003']}
        position={[-2.832, -3.716, 0]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.NurbsPath_Mesh008.geometry}
        material={materials['Material.003']}
        position={[-2.832, -3.716, 0]}
        rotation={[Math.PI / 2, 0, 0]}
      />
    </group>
  )
}

useGLTF.preload(model)
